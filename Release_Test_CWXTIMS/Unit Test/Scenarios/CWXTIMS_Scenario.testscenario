<?xml version="1.0" encoding="UTF-8"?>
<?totaltestVersion 19.2.1.v20180920-0235_707?>
<!--Topaz for Total Test 19.2.1.v20180920-0235_707 02.10.2018 02:36:12-->
<testscenario:testscenario xmlns:checkconditions="http://www.compuware.com/model/xml/checkconditions" xmlns:listructure="http://www.compuware.com/model/xml/listructure" xmlns:properties="http://www.compuware.com/model/xml/properties" xmlns:testcase="http://www.compuware.com/model/xml/testcase" xmlns:testscenario="http://www.compuware.com/model/xml/testscenario" alias="" id="Unit%20Test/Scenarios/CWXTIMS_Scenario.testscenario"><testscenario:description></testscenario:description><testscenario:testcases><testscenario:testcase alias="" csect="CWXTIMS" encoding="1047" id="Unit%20Test/Scenarios/CWXTIMS_Scenario.testscenario%23CWXTIMSCase1" target="CWXTIMS"><testcase:description></testcase:description><testcase:ddio>HDDRXM0.DEMO.DB2</testcase:ddio><testcase:ddiotype>DDIO</testcase:ddiotype><testcase:targetCaptureCompileTime>1529049952000</testcase:targetCaptureCompileTime><testcase:interface>../Interfaces/CWXTIMS.interface#Unit%20Test/Interfaces/CWXTIMS.interface</testcase:interface><testcase:input listructure="../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK" id="arg0.PORDR_AP_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7D6D9C4D940404040404040C1D740400004F660C8C4C1D44040404000000000000000054040404040404040</properties:property><properties:property name="expectedValue" type="string">D7D6D9C4D940404040404040C1D740400004F660C8C4C1D44040404000000000000000054040404040404040</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_DBD_NAME" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_LEVEL" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_STATUS_CODE" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_PROC_OPTIONS" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.FILLER0" id="input.arg0.PORDR_AP_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_NAME" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_KEY_LENGTH" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_NUM_SENS_SEGS" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#PORDR_AP_PCP_MASK.PORDR_AP_KEY" id="input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY" offset="36"/></testcase:input><testcase:input listructure="../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK" id="arg1.PCUST_AP_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7C3E4E2E340404040404040C1D740400004F268C8C4C1D44040404000000000000000034040404040404040</properties:property><properties:property name="expectedValue" type="string">D7C3E4E2E3404040F0F0C7D7C1D740400004F26840404040404040400000000000000003C3D5F0F1F9F9F0F2</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_DBD_NAME" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_LEVEL" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_STATUS_CODE" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_PROC_OPTIONS" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.FILLER0" id="input.arg1.PCUST_AP_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_NAME" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_KEY_LENGTH" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_NUM_SENS_SEGS" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#PCUST_AP_PCP_MASK.PCUST_AP_KEY" id="input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY" offset="36"/></testcase:input><testcase:input listructure="../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK" id="arg2.PPART_AP_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7D7C1D9E34040404040D5C1C1D74040000D3C98C8C4C1D44040404000000000000000024040404040404040</properties:property><properties:property name="expectedValue" type="string">D7D7C1D9E34040404040D5C1C1D74040000D3C98C8C4C1D44040404000000000000000024040404040404040</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_DBD_NAME" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_SEGMENT_LEVEL" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_STATUS_CODE" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_PROC_OPTIONS" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.FILLER0" id="input.arg2.PPART_AP_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_SEGMENT_NAME" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_KEY_LENGTH" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_NUM_SENS_SEGS" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#PPART_AP_PCP_MASK.PPART_AP_KEY" id="input.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY" offset="36"/></testcase:input><testcase:input listructure="../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK" id="arg3.PORDR_GO_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7D6D9C4D940404040404040C7D64040000D38F0C8C4C1D44040404000000000000000054040404040404040</properties:property><properties:property name="expectedValue" type="string">D7D6D9C4D940404040404040C7D64040000D38F0C8C4C1D44040404000000000000000054040404040404040</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_DBD_NAME" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_LEVEL" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_STATUS_CODE" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_PROC_OPTIONS" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.FILLER0" id="input.arg3.PORDR_GO_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_NAME" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_KEY_LENGTH" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_NUM_SENS_SEGS" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#PORDR_GO_PCP_MASK.PORDR_GO_KEY" id="input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY" offset="36"/></testcase:input><testcase:input listructure="../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK" id="arg4.PCUST_GO_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7C3E4E2E340404040404040C7D64040000D3200C8C4C1D44040404000000000000000034040404040404040</properties:property><properties:property name="expectedValue" type="string">D7C3E4E2E340404040404040C7D64040000D3200C8C4C1D44040404000000000000000034040404040404040</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_DBD_NAME" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_LEVEL" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_STATUS_CODE" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_PROC_OPTIONS" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.FILLER0" id="input.arg4.PCUST_GO_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_NAME" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_KEY_LENGTH" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_NUM_SENS_SEGS" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#PCUST_GO_PCP_MASK.PCUST_GO_KEY" id="input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY" offset="36"/></testcase:input><testcase:input listructure="../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure"><testcase:data baseType="listructure:structType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK" id="arg5.PPART_GO_PCP_MASK"><properties:properties><properties:property name="value" type="string">D7D7C1D9E34040404040D5C1C7D64040000D4CE8C8C4C1D44040404000000000000000024040404040404040</properties:property><properties:property name="expectedValue" type="string">D7D7C1D9E34040404040D5C1C7D64040000D4CE8C8C4C1D44040404000000000000000024040404040404040</properties:property></properties:properties></testcase:data><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_DBD_NAME" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_DBD_NAME" offset="0"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_SEGMENT_LEVEL" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_LEVEL" offset="8"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_STATUS_CODE" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_STATUS_CODE" offset="10"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_PROC_OPTIONS" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_PROC_OPTIONS" offset="12"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.FILLER0" id="input.arg5.PPART_GO_PCP_MASK.FILLER0" offset="16"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_SEGMENT_NAME" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_NAME" offset="20"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_KEY_LENGTH" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY_LENGTH" offset="28"/><testcase:data baseType="listructure:numberType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_NUM_SENS_SEGS" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_NUM_SENS_SEGS" offset="32"/><testcase:data baseType="listructure:stringType ../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#PPART_GO_PCP_MASK.PPART_GO_KEY" id="input.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY" offset="36"/></testcase:input><testcase:output listructure="../Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PORDR-AP-PCP-MASK.listructure"/><testcase:output listructure="../Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PCUST-AP-PCP-MASK.listructure"/><testcase:output listructure="../Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PPART-AP-PCP-MASK.listructure"/><testcase:output listructure="../Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PORDR-GO-PCP-MASK.listructure"/><testcase:output listructure="../Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PCUST-GO-PCP-MASK.listructure"/><testcase:output listructure="../Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure#Unit%20Test/Structures/CWXTIMS_PPART-GO-PCP-MASK.listructure"/><testcase:checkconditions><checkconditions:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/><checkconditions:simpleCheckcondition message="Check for PORDR_AP_DBD_NAME failed" name="Check for PORDR_AP_DBD_NAME" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_DBD_NAME"><checkconditions:expression>'PORDR' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PORDR</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_SEGMENT_LEVEL failed" name="Check for PORDR_AP_SEGMENT_LEVEL" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_LEVEL"><checkconditions:expression>'' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_STATUS_CODE failed" name="Check for PORDR_AP_STATUS_CODE" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_STATUS_CODE"><checkconditions:expression>'' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_PROC_OPTIONS failed" name="Check for PORDR_AP_PROC_OPTIONS" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_PROC_OPTIONS"><checkconditions:expression>'AP' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">AP</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_SEGMENT_NAME failed" name="Check for PORDR_AP_SEGMENT_NAME" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_NAME"><checkconditions:expression>'HDAM' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">HDAM</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_KEY_LENGTH failed" name="Check for PORDR_AP_KEY_LENGTH" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_NUM_SENS_SEGS failed" name="Check for PORDR_AP_NUM_SENS_SEGS" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('5').compareTo(output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">5</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_AP_KEY failed" name="Check for PORDR_AP_KEY" refData="#input.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY"><checkconditions:expression>'' eq output.arg0.PORDR_AP_PCP_MASK.PORDR_AP_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_DBD_NAME failed" name="Check for PCUST_AP_DBD_NAME" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_DBD_NAME"><checkconditions:expression>'PCUST' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PCUST</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_SEGMENT_LEVEL failed" name="Check for PCUST_AP_SEGMENT_LEVEL" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_LEVEL"><checkconditions:expression>'00' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string">00</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_STATUS_CODE failed" name="Check for PCUST_AP_STATUS_CODE" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_STATUS_CODE"><checkconditions:expression>'GP' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string">GP</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_PROC_OPTIONS failed" name="Check for PCUST_AP_PROC_OPTIONS" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_PROC_OPTIONS"><checkconditions:expression>'AP' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">AP</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_SEGMENT_NAME failed" name="Check for PCUST_AP_SEGMENT_NAME" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_NAME"><checkconditions:expression>'' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_KEY_LENGTH failed" name="Check for PCUST_AP_KEY_LENGTH" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_NUM_SENS_SEGS failed" name="Check for PCUST_AP_NUM_SENS_SEGS" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('3').compareTo(output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">3</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_AP_KEY failed" name="Check for PCUST_AP_KEY" refData="#input.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY"><checkconditions:expression>'CN019902' eq output.arg1.PCUST_AP_PCP_MASK.PCUST_AP_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string">CN019902</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_DBD_NAME failed" name="Check for PPART_AP_DBD_NAME" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_DBD_NAME"><checkconditions:expression>'PPART' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PPART</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_SEGMENT_LEVEL failed" name="Check for PPART_AP_SEGMENT_LEVEL" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_LEVEL"><checkconditions:expression>'' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_STATUS_CODE failed" name="Check for PPART_AP_STATUS_CODE" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_STATUS_CODE"><checkconditions:expression>'NA' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string">NA</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_PROC_OPTIONS failed" name="Check for PPART_AP_PROC_OPTIONS" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_PROC_OPTIONS"><checkconditions:expression>'AP' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">AP</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_SEGMENT_NAME failed" name="Check for PPART_AP_SEGMENT_NAME" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_NAME"><checkconditions:expression>'HDAM' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">HDAM</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_KEY_LENGTH failed" name="Check for PPART_AP_KEY_LENGTH" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_NUM_SENS_SEGS failed" name="Check for PPART_AP_NUM_SENS_SEGS" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('2').compareTo(output.arg2.PPART_AP_PCP_MASK.PPART_AP_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">2</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_AP_KEY failed" name="Check for PPART_AP_KEY" refData="#input.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY"><checkconditions:expression>'' eq output.arg2.PPART_AP_PCP_MASK.PPART_AP_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_DBD_NAME failed" name="Check for PORDR_GO_DBD_NAME" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_DBD_NAME"><checkconditions:expression>'PORDR' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PORDR</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_SEGMENT_LEVEL failed" name="Check for PORDR_GO_SEGMENT_LEVEL" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_LEVEL"><checkconditions:expression>'' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_STATUS_CODE failed" name="Check for PORDR_GO_STATUS_CODE" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_STATUS_CODE"><checkconditions:expression>'' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_PROC_OPTIONS failed" name="Check for PORDR_GO_PROC_OPTIONS" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_PROC_OPTIONS"><checkconditions:expression>'GO' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">GO</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_SEGMENT_NAME failed" name="Check for PORDR_GO_SEGMENT_NAME" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_NAME"><checkconditions:expression>'HDAM' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">HDAM</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_KEY_LENGTH failed" name="Check for PORDR_GO_KEY_LENGTH" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_NUM_SENS_SEGS failed" name="Check for PORDR_GO_NUM_SENS_SEGS" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('5').compareTo(output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">5</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PORDR_GO_KEY failed" name="Check for PORDR_GO_KEY" refData="#input.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY"><checkconditions:expression>'' eq output.arg3.PORDR_GO_PCP_MASK.PORDR_GO_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_DBD_NAME failed" name="Check for PCUST_GO_DBD_NAME" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_DBD_NAME"><checkconditions:expression>'PCUST' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PCUST</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_SEGMENT_LEVEL failed" name="Check for PCUST_GO_SEGMENT_LEVEL" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_LEVEL"><checkconditions:expression>'' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_STATUS_CODE failed" name="Check for PCUST_GO_STATUS_CODE" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_STATUS_CODE"><checkconditions:expression>'' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_PROC_OPTIONS failed" name="Check for PCUST_GO_PROC_OPTIONS" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_PROC_OPTIONS"><checkconditions:expression>'GO' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">GO</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_SEGMENT_NAME failed" name="Check for PCUST_GO_SEGMENT_NAME" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_NAME"><checkconditions:expression>'HDAM' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">HDAM</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_KEY_LENGTH failed" name="Check for PCUST_GO_KEY_LENGTH" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_NUM_SENS_SEGS failed" name="Check for PCUST_GO_NUM_SENS_SEGS" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('3').compareTo(output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">3</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PCUST_GO_KEY failed" name="Check for PCUST_GO_KEY" refData="#input.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY"><checkconditions:expression>'' eq output.arg4.PCUST_GO_PCP_MASK.PCUST_GO_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_DBD_NAME failed" name="Check for PPART_GO_DBD_NAME" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_DBD_NAME"><checkconditions:expression>'PPART' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_DBD_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">PPART</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_SEGMENT_LEVEL failed" name="Check for PPART_GO_SEGMENT_LEVEL" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_LEVEL"><checkconditions:expression>'' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_LEVEL</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_STATUS_CODE failed" name="Check for PPART_GO_STATUS_CODE" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_STATUS_CODE"><checkconditions:expression>'NA' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_STATUS_CODE</checkconditions:expression><checkconditions:expectation assert="=" type="string">NA</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_PROC_OPTIONS failed" name="Check for PPART_GO_PROC_OPTIONS" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_PROC_OPTIONS"><checkconditions:expression>'GO' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_PROC_OPTIONS</checkconditions:expression><checkconditions:expectation assert="=" type="string">GO</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_SEGMENT_NAME failed" name="Check for PPART_GO_SEGMENT_NAME" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_NAME"><checkconditions:expression>'HDAM' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_SEGMENT_NAME</checkconditions:expression><checkconditions:expectation assert="=" type="string">HDAM</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_KEY_LENGTH failed" name="Check for PPART_GO_KEY_LENGTH" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY_LENGTH"><checkconditions:expression>BigDecimalCreator.make('0').compareTo(output.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY_LENGTH) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">0</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_NUM_SENS_SEGS failed" name="Check for PPART_GO_NUM_SENS_SEGS" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_NUM_SENS_SEGS"><checkconditions:expression>BigDecimalCreator.make('2').compareTo(output.arg5.PPART_GO_PCP_MASK.PPART_GO_NUM_SENS_SEGS) eq 0</checkconditions:expression><checkconditions:expectation assert="=" type="number">2</checkconditions:expectation></checkconditions:simpleCheckcondition><checkconditions:simpleCheckcondition message="Check for PPART_GO_KEY failed" name="Check for PPART_GO_KEY" refData="#input.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY"><checkconditions:expression>'' eq output.arg5.PPART_GO_PCP_MASK.PPART_GO_KEY</checkconditions:expression><checkconditions:expectation assert="=" type="string"></checkconditions:expectation></checkconditions:simpleCheckcondition></testcase:checkconditions><testcase:stubs><testcase:stub>../Stubs/CWXTIMS_SALCUST_READ_01.stub#Unit%20Test/Stubs/CWXTIMS_SALCUST_READ_01.stub</testcase:stub><testcase:stub>../Stubs/CWXTIMS_SALREPT_WRITE_01.stub#Unit%20Test/Stubs/CWXTIMS_SALREPT_WRITE_01.stub</testcase:stub><testcase:stub>../Stubs/CBLTDLI_PCUST-AP-PCP-MASK_01.stub#Unit%20Test/Stubs/CBLTDLI_PCUST-AP-PCP-MASK_01.stub</testcase:stub></testcase:stubs></testscenario:testcase></testscenario:testcases></testscenario:testscenario>